# Generated by Django 4.2.5 on 2025-05-13 19:15

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('tconst', models.CharField(help_text='Alphanumeric unique identifier of the title.', max_length=20, primary_key=True, serialize=False)),
                ('title_type', models.CharField(help_text='Type/format of the title (e.g., movie, short, tvseries).', max_length=50)),
                ('primary_title', models.CharField(help_text='More popular title / the title used for display purposes.', max_length=500)),
                ('original_title', models.CharField(help_text='Original title, in the original language.', max_length=500)),
                ('is_adult', models.BooleanField(default=False, help_text='0: non-adult title; 1: adult title.')),
                ('start_year', models.IntegerField(blank=True, help_text='Represents the release year of a title.', null=True)),
                ('end_year', models.IntegerField(blank=True, help_text='TV Series end year. Null for non-series.', null=True)),
                ('runtime_minutes', models.IntegerField(blank=True, help_text='Primary runtime of the title, in minutes.', null=True)),
                ('genres', models.CharField(blank=True, help_text='Comma-separated list of up to three genres.', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('nconst', models.CharField(help_text='Alphanumeric unique identifier of the name/person.', max_length=20, primary_key=True, serialize=False)),
                ('primary_name', models.CharField(help_text='Primary name of the person.', max_length=255)),
                ('birth_year', models.IntegerField(blank=True, help_text='Birth year.', null=True)),
                ('death_year', models.IntegerField(blank=True, help_text='Death year.', null=True)),
                ('primary_profession', models.CharField(blank=True, help_text='Comma-separated list of professions.', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('movie', models.OneToOneField(help_text='The movie this rating belongs to.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='rating_info', serialize=False, to='movies.movie')),
                ('average_rating', models.FloatField(blank=True, help_text="IMDb's weighted average rating.", null=True)),
                ('num_votes', models.IntegerField(blank=True, help_text='Number of votes the movie has received.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Principal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.IntegerField(help_text='A number to uniquely identify rows for a given titleId.')),
                ('category', models.CharField(help_text='Category of job (e.g., actor, director, writer).', max_length=100)),
                ('job', models.CharField(blank=True, help_text='Specific job title if applicable (e.g., producer).', max_length=255, null=True)),
                ('characters', models.CharField(blank=True, help_text='Name of the character played, in JSON array format.', max_length=500, null=True)),
                ('movie', models.ForeignKey(help_text='The movie.', on_delete=django.db.models.deletion.CASCADE, related_name='principal_set', to='movies.movie')),
                ('person', models.ForeignKey(help_text='The person.', on_delete=django.db.models.deletion.CASCADE, related_name='principal_set', to='movies.person')),
            ],
            options={
                'ordering': ['movie', 'ordering'],
                'unique_together': {('movie', 'person', 'ordering', 'category')},
            },
        ),
        migrations.AddField(
            model_name='movie',
            name='principals',
            field=models.ManyToManyField(help_text='People principally involved with this movie.', related_name='movies_associated', through='movies.Principal', to='movies.person'),
        ),
    ]
